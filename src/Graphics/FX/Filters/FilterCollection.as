package Graphics.FX.Filters {	/**	 * 	 * @author Felipi Macedo	 * 	 * */		import flash.display.DisplayObject;	import flash.display.Shader;	import flash.display.ShaderParameter;	import flash.events.Event;	import flash.filters.ShaderFilter;		public class FilterCollection {				private var _filterArray : Array = []; //An Array with all the filters added		private var _dataArray : Array = []; //An Array with data objects used to control the parameters of the shader		private var _targetObject : DisplayObject; //Target display object of this filter collection				//Returns an object with the shader filters of the array		public function get shaderFilterList() : Object {			var list : Object = {};			for each (var filter:ShaderFilter in _filterArray){				var filterName:String = filter.shader.data.name;				list[filterName] = filter;			}			return list;		}				//Returns an object with the shaders of the array		public function get shaderList() : Object {			var shaderList : Object = [];			for each(var shaderFilter : ShaderFilter in shaderFilterList){				var shaderName : Object = shaderFilter.shader.data.name;				shaderList[shaderName] = shaderFilter.shader;			}						return shaderList;		}				//Returns the filter array		public function get filterArray() : Array {			return _filterArray;		}				//Returns a shader given its name		public function GetShader( shader : String ) : Shader {			return shaderList[shader];		}				//Creates a new Shader Filter		public function AddFilter(filter:Class) : String {						var shader:Shader = new Shader( new filter() );			var shaderFilter:ShaderFilter = new ShaderFilter( shader );			_filterArray.push(shaderFilter);						_dataArray.push({__filterName: shader.data.name});			return shader.data.name;		}				//Removes a Shader Filter		public function RemoveFilter( name : String ) : void {			for (var i:uint = 0; i < filterArray.length; i++){				if(filterArray[i].shader.data.name == name){					_filterArray.splice(i, 1);					_dataArray.splice(i, 1);					break;				}			}		}				//Returns the index of the filter in the array, given its name		public function GetFilterIndex(name : String) : uint{			for (var i:uint = 0; i < filterArray.length; i++){				if(filterArray[i].shader.data.name == name){					return i;					}			}			return null		}				//Returns the data object for a filter		public function GetData(filter : String) : Object {			return _dataArray[GetFilterIndex(filter)];		}				//Add a new parameter to the data object of the filter		public function AddParameter(filter : String, param : String, startValue : Object) : void{			_dataArray[GetFilterIndex(filter)][param] = startValue;		}				//Applies the filters to a given display object		public function ApplyFilters( object : DisplayObject) : void {			_targetObject = object;						object.addEventListener(Event.ENTER_FRAME, RefreshFilters);		}				//Removes the filters from the display object		public function DiscardFilters( object : DisplayObject) : void {			_targetObject.removeEventListener(Event.ENTER_FRAME, RefreshFilters);			object.filters = [];		}				//Traces all the parameters of the filter		public function ShaderParameters( shaderName : String) : void{			var shader:Shader = shaderList[shaderName];			////trace("\n" + shader.data.name);			for each(var param:Object in shader.data){				if(! (param is ShaderParameter) ) continue;				with(param){					////trace(name + ", of type " + type + " == " + value);				}			}		}				//Refreshes the filters of the display object and the data object of the filters		private function RefreshFilters(e: Event) : void{			_targetObject.filters = filterArray;			for each(var data : Object in _dataArray){				for(var obj : Object in data){					if(obj == "__filterName") continue;					_filterArray[GetFilterIndex(data.__filterName)].shader.data[obj].value = [data[obj]];				}			}		}			}	}